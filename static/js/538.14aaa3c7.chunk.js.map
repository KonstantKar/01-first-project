{"version":3,"file":"static/js/538.14aaa3c7.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,2B,mBCS5I,EAPmB,SAACA,GAClB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAASC,UACxCC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,YAAcP,EAAMQ,GAAGJ,SAAA,CAAC,IAAEJ,EAAMS,SAGnD,ECLA,EAHgB,SAACT,GACf,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,QAAUC,SAAEJ,EAAMU,SAC3C,EC0CA,EAvCgB,SAACV,GACf,IAAMW,GAAcC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQH,WAAW,IAC9DI,GAAiBH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQC,cAAc,IACpEC,GAAcJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQE,WAAW,IAChEC,EAAkBN,EAAYO,KAAI,SAACC,GACrC,OAAOlB,EAAAA,EAAAA,KAACmB,EAAU,CAACZ,GAAIW,EAAGX,GAAIC,KAAMU,EAAGV,MACzC,IACIY,EAAkBL,EAAYE,KAAI,SAACC,GACrC,OAAOlB,EAAAA,EAAAA,KAACqB,EAAO,CAACd,GAAIW,EAAGX,GAAIE,QAASS,EAAGT,SACzC,IAEIa,EAAoBC,EAAAA,YAWxB,OACEnB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,QAAUC,SAAA,EACxBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,aAAeC,SAAEa,KACjCZ,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,SAAWC,SAAA,CACxBiB,GACDpB,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,YACEwB,SAZY,WACpB,IAAIC,EAAOH,EAAkBI,QAAQC,MACrC5B,EAAM6B,gBAAgBH,EACxB,EAUUI,IAAKP,EACLK,MAAOb,OAGXd,EAAAA,EAAAA,KAAA,UAAQ8B,QArBG,WACf/B,EAAMgC,YACR,EAmBkC5B,SAAC,sBAIrC,E,oBChBA,EAtByB,WACvB,IAAM6B,GAAWC,EAAAA,EAAAA,MACXC,GAASvB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMuB,KAAKD,MAAM,IAUvD,OACElC,EAAAA,EAAAA,KAACoC,EAAAA,EAAY,CAACF,OAAQA,EAAQG,SAAU,SAASlC,UAC/CH,EAAAA,EAAAA,KAACsC,EAAO,CACNP,WAXoB,WACxBC,GAASD,EAAAA,EAAAA,MACX,EAUMH,gBARyB,SAACH,GAC9BO,GAASO,EAAAA,EAAAA,IAAqBd,GAChC,KAUF,C,sDClBA,IALqB,SAAHe,GAAwC,IAAlCN,EAAMM,EAANN,OAAQG,EAAQG,EAARH,SAAUlC,EAAQqC,EAARrC,SACxC,OAAK+B,EACE/B,GADaH,EAAAA,EAAAA,KAACyC,EAAAA,GAAQ,CAACnC,GAAI+B,GAEpC,C","sources":["webpack://my-app/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx","PrivateRoute/PrivateRoute.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GAxdR\",\"dialogsItems\":\"Dialogs_dialogsItems__l4Blk\",\"active\":\"Dialogs_active__mEgW4\",\"messages\":\"Dialogs_messages__MnjQT\"};","import { NavLink } from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={\"/dialogs/\" + props.id}> {props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\nexport default DialogItem;\r\n","import s from \"../Dialogs.module.css\";\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\nexport default Message;\r\n","import s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst Dialogs = (props) => {\r\n  const dialogsData = useSelector((state) => state.dialogs.dialogsData);\r\n  const newMessageText = useSelector((state) => state.dialogs.newMessageText);\r\n  const messageData = useSelector((state) => state.dialogs.messageData);\r\n  let dialogsElements = dialogsData.map((el) => {\r\n    return <DialogItem id={el.id} name={el.name} />;\r\n  });\r\n  let messageElements = messageData.map((el) => {\r\n    return <Message id={el.id} message={el.message} />;\r\n  });\r\n\r\n  let newMessageElement = React.createRef();\r\n\r\n  let addMessage = () => {\r\n    props.addMessage();\r\n  };\r\n\r\n  let onMessageChange = () => {\r\n    let text = newMessageElement.current.value;\r\n    props.onMessageChange(text);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        {messageElements}\r\n        <div>\r\n          <textarea\r\n            onChange={onMessageChange}\r\n            ref={newMessageElement}\r\n            value={newMessageText}\r\n          ></textarea>\r\n        </div>\r\n        <button onClick={addMessage}>send message</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { updateNewMessageText, addMessage } from \"../../Redux/dialogsReducer\";\r\nimport PrivateRoute from \"../../PrivateRoute/PrivateRoute\";\r\n\r\nconst DialogsContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const isAuth = useSelector((state) => state.auth.isAuth);\r\n\r\n  const addMessageToStore = () => {\r\n    dispatch(addMessage());\r\n  };\r\n\r\n  const onMessageChangeToStore = (text) => {\r\n    dispatch(updateNewMessageText(text));\r\n  };\r\n\r\n  return (\r\n    <PrivateRoute isAuth={isAuth} fallback={\"/Login\"}>\r\n      <Dialogs\r\n        addMessage={addMessageToStore}\r\n        onMessageChange={onMessageChangeToStore}\r\n      />\r\n    </PrivateRoute>\r\n  );\r\n};\r\n\r\nexport default DialogsContainer;\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ isAuth, fallback, children }) => {\r\n  if (!isAuth) return <Navigate to={fallback} />;\r\n  return children;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"names":["props","_jsx","className","s","children","_jsxs","NavLink","to","id","name","message","dialogsData","useSelector","state","dialogs","newMessageText","messageData","dialogsElements","map","el","DialogItem","messageElements","Message","newMessageElement","React","onChange","text","current","value","onMessageChange","ref","onClick","addMessage","dispatch","useDispatch","isAuth","auth","PrivateRoute","fallback","Dialogs","updateNewMessageText","_ref","Navigate"],"sourceRoot":""}